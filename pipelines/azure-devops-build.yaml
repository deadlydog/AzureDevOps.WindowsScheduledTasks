name: 'Set dynamically below in a task'

# Only trigger builds on the 'main' branch and PRs for the 'main' branch.
trigger:
  batch: true
  branches:
    include:
    - main
pr:
  autoCancel: true
  branches:
    include:
    - main

pool:
  vmImage: windows-latest
  demands: npm

variables:
  version.MajorMinor: '2.3' # Manually adjust the version number as needed for semantic versioning. Revision is auto-incremented.
  version.Revision: $[counter(variables['version.MajorMinor'], 0)]
  stableVersionNumber: '$(version.MajorMinor).$(version.Revision)'
  prereleaseVersionNumber: 'Set dynamically below in a task'
  versionNumber: 'Set dynamically below in a task' # Will be set to the stableVersionNumber or prereleaseVersionNumber based on the branch.
  isMainBranch: $[eq(variables['Build.SourceBranch'], 'refs/heads/main')] # Determine if we're building the 'main' branch or not.
  VsixFileName: 'deadlydog.WindowsScheduledTasksBuildAndReleaseTasks.vsix'

steps:
- task: PowerShell@2
  displayName: Set the prereleaseVersionNumber variable value
  inputs:
    targetType: 'inline'
    script: |
      [string] $dateTime = (Get-Date -Format 'yyyyMMddTHHmmss')
      [int] $revision = [System.Math]::Max(0, $(version.Revision) - 1) # Don't increment the revision number for the prerelease versions.
      [string] $prereleaseVersionNumber = "$(version.MajorMinor).$revision-ci$dateTime+$(Build.SourceVersion)"
      Write-Host "Setting the prerelease version number variable to '$prereleaseVersionNumber'."
      Write-Host "##vso[task.setvariable variable=prereleaseVersionNumber]$prereleaseVersionNumber"

- task: PowerShell@2
  displayName: Set the versionNumber to the stable or prerelease version number based on if the 'main' branch is being built or not
  inputs:
    targetType: 'inline'
    script: |
      [bool] $isMainBranch = $(isMainBranch)
      [string] $versionNumber = "$(prereleaseVersionNumber)"
      if ($isMainBranch)
      {
        $versionNumber = "$(stableVersionNumber)"
      }
      Write-Host "Setting the version number to use to '$versionNumber'."
      Write-Host "##vso[task.setvariable variable=versionNumber]$versionNumber"

- task: PowerShell@2
  displayName: Set the name of the build (i.e. the Build.BuildNumber)
  inputs:
    targetType: 'inline'
    script: |
      [string] $buildName = "$(versionNumber)_$(Build.SourceBranchName)"
      Write-Host "Setting the name of the build to '$buildName'."
      Write-Host "##vso[build.updatebuildnumber]$buildName"

- task: Pester.PesterRunner.Pester-Task.Pester@9
  displayName: 'Pester Test Runner'
  inputs:
    CodeCoverageOutputFile: '$(System.DefaultWorkingDirectory)\CodeCoverage.xml'
    PesterVersion: OtherVersion
    preferredPesterVersion: 4.10.1

- task: PublishTestResults@2
  displayName: 'Publish Test Results **/TEST-*.xml'
  inputs:
    testResultsFormat: NUnit
  condition: succeededOrFailed()

- task: PublishCodeCoverageResults@1
  displayName: 'Publish code coverage from $(System.DefaultWorkingDirectory)\CodeCoverage.xml'
  inputs:
    summaryFileLocation: '$(System.DefaultWorkingDirectory)\CodeCoverage.xml'
    reportDirectory: '$(System.DefaultWorkingDirectory)\JaCoCo'

- task: ms-devlabs.vsts-developer-tools-build-tasks.tfx-installer-build-task.TfxInstaller@3
  displayName: 'Install Node CLI for Azure DevOps (tfx-cli)'
  inputs:
    version: v0.6.x

- task: ms-devlabs.vsts-developer-tools-build-tasks.package-extension-build-task.PackageAzureDevOpsExtension@3
  displayName: 'Package Extension into a VSIX file'
  inputs:
    rootFolder: 'src'
    patternManifest: 'vss-extension.json'
    outputPath: '$(Build.ArtifactStagingDirectory)\$(VsixFileName)'
    extensionVersion: '$(Build.BuildNumber)'
    updateTasksVersion: true

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: drop'
